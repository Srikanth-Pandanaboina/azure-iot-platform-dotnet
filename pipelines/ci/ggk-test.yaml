trigger: none
pr: none

pool:
  vmImage: ubuntu-latest
variables:
  - template: ../templates/variables-all.yaml
  - name: serenityMajorVersion
    value: 5
  - name: serenityMinorVersion
    value: 0
  - name: serenityPatchVersion
    value: 0
  - name: serenityVersion
    value: $(serenityMajorVersion).$(serenityMinorVersion).$(serenityPatchVersion)
  - name: serenityVersionRowKey
    value: serenityVersion
  - name: serenityVersionWithMetadata
    value: $(serenityVersion)+$(Build.SourceVersion).$(Build.BuildId)
  - name: serenityVersionWithMetadataRowKey
    value: serenityVersionWithMetadata
    # https://helm.sh/docs/chart_best_practices/conventions/#version-numbers
  - name: serenityVersionWithMetadataKubernetesFormat
    value: $(serenityVersion)_$(Build.SourceVersion).$(Build.BuildId)
  - name: serenityVersionWithMetadataKubernetesFormatRowKey
    value: serenityVersionWithMetadataKubernetesFormat
  - name: applicationCode
    value: ggktech
  - name: applicationShortCode
    value: ggk
  - name: environmentCategory
    value: dev
  - name: subscriptionName
    value: 3M-CRSLAD16-BBIoTP-Dev
  - name: environmentName
    value: GGK-Environment
  - name: aksName
    value: $(applicationCode)-$(aksPartialName)-$(environmentCategory)
  - name: appConfigurationName
    value: $(applicationCode)-$(appConfigurationPartialName)-$(environmentCategory)
  - name: resourceGroupName
    value: $(resourceGroupPartialName)-iot-$(applicationShortCode)-$(environmentCategory)
  - name: storageAccountName
    value: $(applicationCode)$(storageAccountPartialName)$(environmentCategory)
  - name: tableStorageName
    value: pipeline
  - name: tableStoragePartition
    value: test
  - name: tableStorageRowKeyPrefix
    value: "build-$(Build.BuildId):"
  - name: kubernetesNamespaceWasCreatedRowKey
    value: kubernetesNamespaceWasCreated
  - name: mmmIotPlatformServicesHelmChartWasInstalledRowKey
    value: mmmIotPlatformServicesHelmChartWasInstalled
  - name: mmmIotPlatformIngressHelmChartWasInstalledRowKey
    value: mmmIotPlatformIngressHelmChartWasInstalled
  - name: tableStorageAppConfigurationConnectionStringRowKey
    value: appConfigurationConnectionString
  - name: kubernetesNamespace
    value: default
  - name: dockerfile
    value: Dockerfile
  - name: mmmIotPlatformServicesHelmChartName
    value: mmm-iot-platform-services
  - name: mmmIotPlatformIngressHelmChartName
    value: mmm-iot-platform-ingress
  - name: publishedFilesArtifactName
    value: publishFiles
  - name: helmInstallTimeoutInSeconds
    value: 600
  - name: mmmIotPlatformServicesHelmChartValuesFile
    value: pipelines/ci/mmm-iot-platform-chart-values.yaml
  - name: mmmIotPlatformServicesHelmChartReleaseName
    value: services-build-$(Build.BuildId)
  - name: mmmIotPlatformIngressHelmChartReleaseName
    value: ingress-build-$(Build.BuildId)
  - name: clusterIpRowKey
    value: clusterIp
  - name: serenityDevTenantId
    value: 087445f1-234f-45a8-8b4b-d8b4685cbd3a
resources:
  repositories:
    - repository: azure-iot-functional-tests
      name: MMM/azure-iot-functional-tests
      type: githubenterprise
      endpoint: GithubMMM
      ref: master
stages:
  - stage: build
    displayName: Build
    dependsOn: []
    jobs:
      - job: preBuild
        displayName: Pre-build
        steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: Get App Configuration connection string
            name: getAppConfigurationConnectionString
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                appConfigurationConnectionString=`az appconfig credential list --name $(appConfigurationName) --resource-group $(resourceGroupName) --query "[?name=='Primary'].connectionString | [0]" --output tsv`
                echo "##vso[task.setvariable variable=AppConfigurationConnectionString;isOutput=true]$appConfigurationConnectionString"
                az storage entity insert --entity PartitionKey=$(tableStoragePartition) RowKey=$(tableStorageRowKeyPrefix)$(tableStorageAppConfigurationConnectionStringRowKey) Content="$appConfigurationConnectionString" --table-name $(tableStorageName) --account-name $(storageAccountName)

      - job: build
        displayName: Build
        dependsOn:
          - preBuild
        variables:
          AppConfigurationConnectionString: $[dependencies.preBuild.outputs['getAppConfigurationConnectionString.appConfigurationConnectionString']]
        steps:
          - checkout: self
            displayName: Checkout repository

          - script: >-
              dotnet restore
              --force
              --no-cache
              --no-dependencies
              --packages .nuget
              --runtime $(dotnetProductionRuntimeId)
              /p:TargetLatestRuntimePatch=true
            displayName: Restore dependencies

          - script: >-
              dotnet publish
              --self-contained false
              --no-dependencies
              --configuration $(dotnetBuildConfiguration)
              --runtime $(dotnetProductionRuntimeId)
              /p:TargetLatestRuntimePatch=true
              /p:VersionPrefix=$(serenityVersion).$(Build.BuildId)
            displayName: Build assemblies

          - task: CopyFiles@2
            displayName: Prepare file artifacts
            inputs:
              contents: |
                *.sln
                *.props
                *.ruleset
                global.json
                .nuget/**/*
                src/services/**/*
                test/services/**/*
              targetFolder: $(publishedFilesArtifactName)
              cleanTargetFolder: true

          - publish: $(publishedFilesArtifactName)
            artifact: $(publishedFilesArtifactName)
            displayName: Publish file artifacts

  - stage: unitTest
    displayName: Unit test
    dependsOn:
      - build
    jobs:
      - job: unitTest
        displayName: Unit test
        variables:
          - name: excludeFromCodeCoverage
            value: "[Mmm.*.Test*]*%2C[Mmm.*.WebService]*Startup%2C[Mmm.*.WebService]*Program%2C[*]Mmm.Iot.Common.Services.Config.*%2C[*]*DependencyResolution*%2C[*]Mmm.*Model*"
        steps:
          - checkout: none

          - task: DownloadPipelineArtifact@2
            displayName: Download artifacts
            inputs:
              source: current
              artifact: $(publishedFilesArtifactName)
              path: $(Build.SourcesDirectory)

          - task: DotNetCoreCLI@2
            displayName: Run unit tests
            inputs:
              command: test
              workingDirectory: $(Build.SourcesDirectory)
              arguments: >-
                --no-build
                --configuration $(dotnetBuildConfiguration)
                --runtime $(dotnetProductionRuntimeId)
                --logger trx
                /p:CollectCoverage=true
                /p:CoverletOutputFormat=cobertura
                "/p:Exclude=\"$(excludeFromCodeCoverage)\""

          - script: |-
              dotnet tool install --tool-path ./reportgenerator-tool dotnet-reportgenerator-globaltool
              ./reportgenerator-tool/reportgenerator -reports:**/coverage.cobertura.xml -targetdir:. -reporttypes:"Cobertura"
            displayName: Generate coverage report

          - task: PublishCodeCoverageResults@1
            displayName: Publish test coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: Cobertura.xml

  - stage: lintFrontEndCode
    displayName: Lint front-end code
    dependsOn: []
    jobs:
      - job: lintFrontEndCode
        displayName: Lint front-end code
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: NodeTool@0
            inputs:
              versionSpec: 10.14.1

          - pwsh: |-
              npm install
              npm run lint
            displayName: npm run lint
            workingDirectory: src/webui

  - stage: buildFrontEndContainers
    displayName: Build front-end containers
    dependsOn: []
    jobs:
      - job: buildFrontEndContainers
        displayName: Build front-end containers
        strategy:
          matrix:
            reverse-proxy:
              serviceName: reverse-proxy
            webui:
              serviceName: webui
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: Docker@2
            displayName: Build and push container
            inputs:
              containerRegistry: $(dockerHubServiceConnectionName)
              repository: $(dockerHubRepositoryName)/$(serviceName)
              command: buildAndPush
              dockerfile: src/$(serviceName)/$(dockerfile)
              buildContext: src/$(serviceName)
              tags: |-
                $(Build.BuildId)
                $(Build.SourceVersion)

  - stage: buildServiceContainers
    displayName: Build service containers
    dependsOn:
      - build
    jobs:
      - job: buildServiceContainers
        displayName: Build service containers
        strategy:
          matrix:
            asa-manager:
              serviceName: asa-manager
            config:
              serviceName: config
            device-telemetry:
              serviceName: device-telemetry
            diagnostics:
              serviceName: diagnostics
            identity-gateway:
              serviceName: identity-gateway
            iothub-manager:
              serviceName: iothub-manager
            storage-adapter:
              serviceName: storage-adapter
            tenant-manager:
              serviceName: tenant-manager
        steps:
          - checkout: none

          - download: current
            artifact: $(publishedFilesArtifactName)
            displayName: Download artifacts

          - pwsh: |-
              $assemblyName = (Get-Content src/services/$(serviceName)/WebService/WebService.csproj | Select-String '(?<=<AssemblyName>).*(?=</AssemblyName>)').Matches[0].Value
              $dockerfileContents = "FROM mcr.microsoft.com/dotnet/core/aspnet:$(dotnetCoreRuntimeVersion)-alpine AS base`nWORKDIR /app`nEXPOSE 80`nCOPY . .`nENTRYPOINT [`"dotnet`", `"$assemblyName.dll`"]"
              Set-Content -Value $dockerfileContents -Path $(dockerfile) -NoNewline -Encoding utf8
            displayName: Generate Dockerfile
            workingDirectory: $(Pipeline.Workspace)/$(publishedFilesArtifactName)

          - task: Docker@2
            displayName: Build and push container
            inputs:
              containerRegistry: $(dockerHubServiceConnectionName)
              repository: $(dockerHubRepositoryName)/$(serviceName)
              command: buildAndPush
              dockerfile: $(Pipeline.Workspace)/$(publishedFilesArtifactName)/$(dockerfile)
              buildContext: $(Pipeline.Workspace)/$(publishedFilesArtifactName)/src/services/$(serviceName)/WebService/bin/$(dotnetBuildConfiguration)/netcoreapp$(dotnetCoreRuntimeVersion)/$(dotnetProductionRuntimeId)/publish
              tags: |-
                $(Build.BuildId)
                $(Build.SourceVersion)
  - stage: DeployServiceContainers
    displayName: Deploy service containers
    dependsOn:
      - buildServiceContainers
    jobs:
      - job: deployServices
        displayName: Deploy Services
        steps:
         - checkout: none
      -  template: ../templates/jobs-deploy-code.yaml
         parameters:
             subscriptionName: $(subscriptionName)
             environmentName: $(environmentName)
             environmentCategory: $(environmentCategory)
             applicationCode: $(applicationCode)
             applicationShortCode: $(applicationShortCode)
             imageTag: $(Build.BuildId)
