parameters:
  aksName:
  resourceGroupName:
  subscriptionName:
  serviceName:
  blueServiceName: 
  greenServiceName: 
  servicePort:
  serviceProbesEnabled:
  helmVersion:
  imageTag:
  type:


steps:
  - script: |-
      echo "aksName: ${{parameters.aksName}}"
      echo "resourceGroupName: ${{parameters.resourceGroupName}}"
      echo "subscriptionName: ${{parameters.subscriptionName}}"
      echo "serviceName: ${{parameters.serviceName}}"
      echo "servicePort: ${{parameters.servicePort}}"
      echo "serviceProbesEnabled: ${{parameters.serviceProbesEnabled}}"
      echo "helmVersion: ${{parameters.helmVersion}}"
      echo "blueServiceName: ${{parameters.blueServiceName}}"
    displayName: Print step variables

  - checkout: self
    displayName: Checkout repository
         
  # - task: AzureCLI@2
  #   displayName: Connect to AKS Cluster
  #   name: getPipelineVariables
  #   inputs:
  #     azureSubscription: ${{parameters.subscriptionName}}
  #     scriptType: bash
  #     scriptLocation: inlineScript
  #     inlineScript: |-
  #       set -Eeuxo pipefail
  #       az aks get-credentials --name ${{parameters.aksName}} --resource-group ${{parameters.resourceGroupName}} --overwrite-existing
  #       kubectl get pods
  #       type=`kubectl get svc {{parameters.serviceName}} -o=jsonpath='{.spec.selector.type}'`
  #       echo "$type"
  #       if [ $type == 'green' ]
  #       then
  #         echo "##vso[task.setvariable variable=type]blue"
  #       else
  #         echo "##vso[task.setvariable variable=type]green"
  #       fi 


  - task: HelmInstaller@1
    displayName: Install Helm
    inputs:
      helmVersionToInstall: ${{parameters.helmVersion}}

  - task: HelmDeploy@0
    displayName: Initialize Helm
    inputs:
      connectionType: Azure Resource Manager
      azureSubscription: ${{parameters.subscriptionName}}
      azureResourceGroup: ${{parameters.resourceGroupName}}
      kubernetesCluster: ${{parameters.aksName}}
      namespace: default
      command: init
      arguments: --force-upgrade


  - task: HelmDeploy@0
    displayName: Upgrading the service for first time
    inputs:
      connectionType: Azure Resource Manager
      azureSubscription: 3M-CRSLAD16-BBIoTP-Dev
      azureResourceGroup: rg-iot-ggk-dev
      kubernetesCluster: ggktech-aks-dev
      namespace: default
      command: upgrade
      chartType: FilePath
      chartPath: charts/mmm-iot-service
      releaseName: ${{parameters.serviceName}}
      force: true
      install: true
      overrideValues: nameOverride=${{parameters.serviceName}},service.port=${{parameters.servicePort}},type=${{parameters.type}},deployment.enabled=false,service.enabled=true

  - task: HelmDeploy@0
    displayName: Creation Blue application deployment
    condition: eq(variables.type,'blue')
    inputs:
      connectionType: Azure Resource Manager
      azureSubscription: 3M-CRSLAD16-BBIoTP-Dev
      azureResourceGroup: rg-iot-ggk-dev
      kubernetesCluster: ggktech-aks-dev
      namespace: default
      command: upgrade
      chartType: FilePath
      chartPath: charts/mmm-iot-service
      releaseName: ${{parameters.blueServiceName}}
      overrideValues: nameOverride=${{parameters.serviceName}},deployment.port.http=${{parameters.servicePort}},deployment.probes.enabled=${{parameters.serviceProbesEnabled}},deployment.image.tag=${{parameters.imageTag}},type=blue,deployment.enabled=true,service.enabled=false,deployment.name=${{parameters.blueServiceName}}
      force: true
      install: true


  - task: HelmDeploy@0
    displayName: Creation of Green Deployment
    condition: eq(variables.type,'green')
    inputs:
      connectionType: Azure Resource Manager
      azureSubscription: 3M-CRSLAD16-BBIoTP-Dev
      azureResourceGroup: rg-iot-ggk-dev
      kubernetesCluster: ggktech-aks-dev
      namespace: default
      command: upgrade
      chartType: FilePath
      chartPath: charts/mmm-iot-service
      releaseName: ${{parameters.greenServiceName}}
      overrideValues: nameOverride=${{parameters.serviceName}},deployment.port.http=${{parameters.servicePort}},deployment.probes.enabled=${{parameters.serviceProbesEnabled}},type=green,deployment.image.tag=${{parameters.imageTag}},deployment.enabled=true,service.enabled=false,deployment.name=${{parameters.greenServiceName}}
      force: true
      install: true

  # - task: HelmDeploy@0
  #   inputs:
  #     connectionType: Azure Resource Manager
  #     azureSubscription: ${{parameters.subscriptionName}}
  #     azureResourceGroup: ${{parameters.resourceGroupName}}
  #     kubernetesCluster: ${{parameters.aksName}}
  #     useClusterAdmin: false
  #     namespace: default
  #     command: upgrade
  #     type: $(type)
  #     chartType: FilePath
  #     chartPath: charts/mmm-iot-service
  #     releaseName: ${{parameters.serviceName}}
  #     overrideValues: nameOverride=${{parameters.serviceName}},service.port=${{parameters.servicePort}},type=${{ parameters.type }},deployment.enabled=false,service.enabled=true
  #     force: true
  #     arguments: --cleanup-on-fail --set-string gitSha=$(Build.SourceVersion)
  #     waitForExecution: true
  #     install: true
  - task: AzureCLI@2
    displayName: Patch the AKS Service
    name: patchAKSService
    inputs:
      azureSubscription: ${{parameters.subscriptionName}}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |-
        set -Eeuxo pipefail
        az aks get-credentials --name ${{parameters.aksName}} --resource-group ${{parameters.resourceGroupName}} --overwrite-existing
        kubectl get pods 
        while [ $status -lt 2 ];
        do 
          status=`kubectl get pods -l type=$(type) -l app.kubernetes.io/instance=${{parameters.serviceName}} -o json | jq -r .items[].status.phase | grep "Running" | wc -l`
          echo $status
        #status = `kubectl describe pod ${{parameters.serviceName}}-"$(type)" | grep 'Status:' | tr -s " " | cut -d ':' -f2`
        done
        kubectl patch svc ${{parameters.serviceName}} -p '{"spec": {"selector": {"app.kubernetes.io/name":"${{parameters.serviceName}}", "type": "$(type)"}}}'
